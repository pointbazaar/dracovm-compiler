
DracoVM is supposed to be a stack based, compiled VM Language.
It is ispired by the Jack VM (from Nand2Tetris)

Commands supported:
(for now commands support just integers)

hypothetical STACK (relevant for description of commands):
x
a
b <- esp

the RETURNS is what is left on the stack after operands have been popped
1 means true,
0 means false

	COMMAND	RETURNS	    COMMENT

	//arithmetic 
	add	a+b	integer     addition
	sub	a-b	integer     subtraction
	mul	a*b	integer     multiplication
	div	a/b	integer     division

	neg	-b	integer     inversion


	eq	1 or 0	        equality
	neq 1 or 0  !=      not equals
	gt	1 or 0 	>
	lt	1 or 0	<
	geq	1 or 0	>=
	leq	1 or 0	<=

    //logical
	and	1 or 0	        conjunction
	or	1 or 0	        disjunction
	not	1 or 0	        negation

	inc	tos+1	        increment top of stack
	dec	tos-1	        decrement top of stack

	//bit-shifting
	lshifl a << b       logical shift left by b bits
	lshiftr a >> b      logical shift right by b bits

VIRTUAL MEMORY SEGMENTS
	the DracoVM manipulates various virtual memory segments
	these memory segments have pointers which have a constant address in virtual memory
	and can be used to access these segments
	ARG and LOCAL are on the stack, STATIC is in the .bss or .data segment probably

	ARG	arguments to the subroutine
	LOCAL	local variables for the subroutine
	STATIC	static variables which have a constant virtual memory address


ACCESSING MEMORY SEGMENTS:
	iconst	n		//push a constant integer on the stack
	cconst  c		//pushes a literal character value onto the stack, by converting it
				//to it's ascii code
	fconst	x		//push a float constant on the stack

	push 	SEGMENT index
	pop 	SEGMENT index

	pop 			//just pop the top item off the stack
	dup			//duplicates the top of stack
	swap			//swaps the 2 topmost items on the stack


PROGRAM FLOW COMMANDS:
	label	SYMBOL  //globally unique label for jumping
	goto 	SYMBOL  //jump to a label specified earlier
	if-goto	SYMBOL  //jumps to that label if TOP OF STACK is true (1)
			//also pops the top of stack

SUBROUTINE CALLING COMMANDS:
	subroutine	SUBRNAME NARGS args NLOCALS locals
			//subroutine label with the number of local variables and number of arguments declared

	call 		SUBRNAME 
			//call a subroutine. the arguments should have been pushed on the stack first

	return
	//transfer control back to the calling function
	exit		//exits from the program, the exit status code is the top of stack
			//top of stack==0 if successful
//all subroutines must always leave 1 return
//value on the stack

FUNCTIONAL PROGRAMMING COMMANDS:
    callfromstack
        //calls the subroutine laying on the stack. The other stuff is same as normal 'call' vm command

    pushsubroutine  SUBRNAME
        //pushes the label for that subroutine on the stack


ARRAY READ/WRITE:

->	arraystore INDEX
	//basically, before calling this vm command, the stack needs to look like:
	//
	//(stack grows downwards)
	//|--------------|
	//|undefined     |
	//|--------------|
	//|arr_addr      |
	//|--------------|
	//|index into arr|
	//|--------------|
	//|value_to_store| <- esp
	//|--------------|
	//this vm command removes both its arguments from the stack.
	//after it completes, the stack looks like:
	//|--------------|
	//|undefined     | <- esp
	//|--------------|
	//arrays in dragon are length-prefixed, meaning the array [1,2] looks like this in memory:
	//   | 2 | 1 | 2 |
	//so the first element is always its length, so we can check if we are out of bounds.
	//this bounds checking is not enabled now, but might be enabled later
	//IMPORTANT:
	// currently, arrays are not length-prefixed. 
	// you can see it if you look how array constants are translated to vm code
	// /// old ///arraystore INDEX already handles offseting the index by (+1), meaning we can index
	// /// old ///into the array in the vm code as we wish

->	arrayread
	//stack looks like:
	//|undefined
	//|array address
	//|array index <- esp
	////after execution of this command, stack looks like
	//|undefined
	//|array[index] <-esp
	//meaning this vm command reads from an array, and places the value on the stack




CALLING CONVENTIONS:

	REGARDING ARGUMENTS:
	first, all the arguments to a subroutine are pushed on the stack,
	in reverse order.

	after the callee has terminated, the caller clears the arguments off the stack.

	REGARDING LOCAL VARIABLES:
	local variables are pushed by the called subroutine in the order they
	appear in the subroutine signature.
	they must be cleared off the stack by the subroutine being called




//good explanation of c calling conventions:
//https://norasandler.com/2018/06/27/Write-a-Compiler-9.html
